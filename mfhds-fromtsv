infile="${1}"

if [[ -z ${infile} ]];then echo "You must supply a file name for a tab delimited file\nYou will need to modify the fields in the awk script to match the headers of your input file";fi

fileroot=$(echo "${infile}" | sed 's/\.....\?$//')

if [[ "${fileroot}" =~ [Ii}[Tt][Ee][Mm] ]];then
	echo -e "\nItem file detected -- ignoring note fields\n"
	outfile="mfhds_fromitems.mrc"
else
	echo -e  "\nCheckin file assumed. Place the string \"item\" in your source file name if this is not intended\n"
	outfile="mfhds_fromcheckins.mrc"
fi

read -r -d '' awkscript << "ENDOFAWK"
#!/usr/bin/awk -f 

BEGIN {
	record_template="=LDR  00159cx  a22000733  4500"FS"=001  HOLDINGSID"FS"=004  BIBID"FS"=008  9810090p    8   4001aueng0000000"FS

	#template_852="=852   CALLTYPE"SFS"bLOCATION"SFS"kCALLPREFIX"SFS"hCALLVALUE"SFS"mCALLSUFFIX"
	#######
	# 0 = LC
	# 1 = DDC
	# 2 = NLM
	# 3 = Gov docs
	# 8 = Other scheme
	callTypeDefault = 0 
	callNumberType = callTypeDefault 

	alma_regex867 = " *; 867: *"
	alma_regex868 = " *; 868: *"
	alma_source = 0
	multispace = " +"
	not_delim = "[^"SFS"]*"
	alma_subfield = " *\\\$\\\$([a-z0-9]) *"
	doubledagger = " *‡ *"

	if(length("а") != 2) {
		badawk = 1
		printf("Your version of awk does not support mfhds-fromitems -- you need a version that supports the -b switch\\n")
		exit
	}
}
function build_mfhd() {
	leader1 = "cx  a22"
	leader2 = "3  4500"
	directory = ""
	base_address = 0
	field_counter = 0 
	field_length = 0
	record_content = ""
	record_counter++

	text_852 = ""
	text_mfhd = "=LDR  00159cx  a22000733  4500"OFS"=001  "holdId""OFS"=004  "$bibId""OFS"=008  9810090p    8   4001aueng0000000"

	if (callType > 1) {
		 $callType=tolower($callType)
                 gsub(/[^a-z0-9]/, "", $callType)

		switch($callType) {
			case "lcc":
				callNumberType = 0
				break
			case "libraryofcongressclassification":
				callNumberType = 0
				break
			case "ddc":
				callNumberType = 1
				break
			case "deweydecimalclassification":
				callNumberType = 1
				break
			case "nlm":
				callNumberType = 2
				break
			case "nationallibraryofmedicine":
				callNumberType = 2
				break
			case "superintendentofdocumentsclassification":
				callNumberType = 3
				break
			case "otherscheme":
				callNumberType = 8
				break
			case "title":
				callNumberType = 5
				break
			case "local":
				callNumberType = 8
				break
			default:
				callNumberType = callTypeDefault
				break
		}
	}

	if (marc852 > 0) { 
		if (NR == 1) { next }
		$marc852 = gensub(alma_subfield, SFS"\\\1", "g", $marc852)
		sub(not_delim, "", $marc852)
		text_852 = text_852""$marc852 
	} else { 
		text_852="=852   "callNumberType""SFS"b"$location""SFS"k"CALLPREFIX""SFS"h"callNum""SFS"m"CALLSUFFIX
	}

	if (recType > 0) {
		switch($recType) {
			case "s":
				leader1 = "cy  a22"
				break
			case "v":
				leader1 = "cv  a22"
				break
			case "u":
				leader1 = "cu  a22"
				break
		}
	}

	if (publicNote > 0 && $publicNote ~ /[a-zA-Z0-9]/) {
		split($publicNote, statements, ";")
		for (statement in statements) { text_mfhd = text_mfhd""OFS"=538    "SFS"a"statements[statement] }
	}
	if (ownershipNote > 0 && $ownershipNote ~ /[a-zA-Z0-9]/) {
		split($ownershipNote, statements, ";")
		for (statement in statements) { text_mfhd = text_mfhd""OFS"=561  0 "SFS"a"statements[statement] }
	}
	if (copyNote > 0 && $copyNote ~ /[a-zA-Z0-9]/) {
		split($copyNote, statements, ";")
		for (statement in statements) { text_mfhd = text_mfhd""OFS"=562  0 "SFS"a"statements[statement] }
	}
	if (bindingNote > 0 && $bindingNote ~ /[a-zA-Z0-9]/) {
		split($bindingNote, statements, ";")
		for (statement in statements) { text_mfhd = text_mfhd""OFS"=563    "SFS"a"statements[statement] }
	}
	if (actionNote > 0 && $actionNote ~ /[a-zA-Z0-9]/) {
		split($actionNote, statements, ";")
		for (statement in statements) { text_mfhd = text_mfhd""OFS"=583    "SFS"a"statements[statement] }
	}
	if (notecheckin > 0 && $notecheckin ~ /[a-zA-Z0-9]/) {
		split($notecheckin, statements, ";")
		for (statement in statements) { text_mfhd = text_mfhd""OFS"=583    "SFS"a"statements[statement] }
	}
	if (staffnote > 0 && $staffnote ~ /[a-zA-Z0-9]/) {
		split($staffnote, statements, ";")
		for (statement in statements) { text_mfhd = text_mfhd""OFS"=583    "SFS"a"statements[statement] }
	}
	if (staffnote2 > 0 && $staffnote2 ~ /[a-zA-Z0-9]/) {
		split($staffnote2, statements, ";")
		for (statement in statements) { text_mfhd = text_mfhd""OFS"=583    "SFS"a"statements[statement] }
	}
	if (acquisitionstatus > 0 && $acquisitionstatus ~ /[a-zA-Z0-9]/) {
		split($acquisitionstatus, statements, ";")
		for (statement in statements) { text_mfhd = text_mfhd""OFS"=583    "SFS"a"statements[statement] }
	}
	text_mfhd = text_mfhd""OFS""text_852

	if (libHas > 0 && $libHas ~ /[a-zA-Z0-9]/) {
		sub(/^1\.[1-9]?[0-9] /, "", $libHas)
		gsub(/;1\.[1-9]?[0-9] /, "", $libHas)
		split($libHas, statements, ";") 
		for (statement in statements) { text_mfhd = text_mfhd""OFS"=866    "SFS"a"statements[statement]
		}
	}

	split(text_mfhd, marc_array, OFS)	
	num_mfhd_fields = length(marc_array)
	
	for (field = 2; field <= num_mfhd_fields; ++field) {
		tag = substr(marc_array[field], 2, 3)
	
		field_content = substr(marc_array[field], 7)""OFS
		field_length=sprintf("%04d", length(field_content))
	
		directory_address = sprintf("%05d", base_address)
		base_address = base_address + field_length
	
		directory = directory""tag""field_length""directory_address
		record_content = record_content""field_content
		field_counter++
		}
	
	directory = directory""OFS
	base_data_address = sprintf("%05d", 24 + length(directory))
	
	record_content = record_content

	record_length = 24 + length(directory) + length(record_content) + 1
	
	leader = sprintf("%05d", record_length)""leader1""base_data_address""leader2

	if (processed[holdId] != 1){ 
		print leader""directory""record_content > OUTFILE
		processed[holdId] = 1
		created = created + 1
	}

	if (NR % 10000 == 0){ printf "Records processed: %d :created: %d \\r", record_counter, created }
}
{
	sub("\r", "", $NF)

	if (NR == 1) {

		itemfile = 0

		if ( FILENAME ~ /[Ii}[Tt][Ee][Mm]/ ){ itemfile = 1 }

		for(i=1;i<=NF;i++) {
			compareheader=tolower($i)
			gsub(/[^a-z0-9]/, "", compareheader)

			switch(compareheader) {
				case "852marc":
					marc852=i
					printf ("Alma holdings data found in "$i"\\n")
					alma_source = 1
					template_852="=852   0"
					break
				case "bibno":
					bibId=i
					printf ("Bib ID found in "$i"\\n")
					break
				case "bibid":
					bibId=i
					printf ("Bib ID found in "$i"\\n")
					break
				case "mmsid":
					bibId=i
					printf ("Bib ID found in "$i"\\n")
					break
				case "mmsrecordid":
					bibId=i
					printf ("Bib ID found in "$i"\\n")
					break
				case "recordbibliographic":
					bibId=i
					printf ("Bib ID found in "$i"\\n")
					break
				case "recordbiblio":
					bibId=i
					printf ("Bib ID found in "$i"\\n")
					break
				case "loc":
					location=i
					printf ("Location found in "$i"\\n")
					break
				case "location":
					location=i
					printf ("Location found in "$i"\\n")
					break
				case "locationcode":
					location=i
					printf ("Location found in "$i"\\n")
					break
				case "permanentlocation":
					location=i
					printf ("Location found in "$i"\\n")
					break
				case "permanentphysicallocation":
					location=i
					printf ("Location found in "$i"\\n")
					break
				case "callmarc":
					callNumPos=i
					printf ("Call number found in "$i"\\n")
					break
				case "call":
					callNumPos=i
					printf ("Call number found in "$i"\\n")
					break
				case "callno":
					callNumPos=i
					printf ("Call number found in "$i"\\n")
					break
				case "callnumber":
					callNumPos=i
					printf ("Call number found in "$i"\\n")
					break
				case "callnumtype":
					callType=i
					printf ("Call number type found in "$i"\\n")
					break
				case "calltype":
					callType=i
					printf ("Call number type found in "$i"\\n")
					break
				case "callnumbertype":
					callType=i
					printf ("Call number type found in "$i"\\n")
					break
				case "callitem":
					callNumPos=i
					printf ("Call number found in "$i"\\n")
					break
				case "callprefix":
					callPrefix=i
					printf ("Call number prefix found in "$i"\\n")
					break
				case "callsuffix":
					callSuffix=i
					printf ("Call number suffix found in "$i"\\n")
					break
				case "callbibliographic":
					callNumFallback=i
					printf ("Call number fallback found in "$i"\\n")
					break
				case "bibcall":
					callNumFallback=i
					printf ("Call number fallback found in "$i"\\n")
					break
				case "callbiblio":
					callNumFallback=i
					printf ("Call number fallback found in "$i"\\n")
					break
				case "callnonmarc":
					callNumFallback=i
					printf ("Call number fallback found in "$i"\\n")
					break
				case "libhas":
					libHas=i
					printf ("Lib has was found in "$i"\\n")
					break
				case "libhascheckin":
					libHas=i
					printf ("Lib has was found in "$i"\\n")
					break
				case "summaryholding":
					libHas=i
					printf ("Lib has was found in "$i"\\n")
					break
				case "holdid":
					holdIdpos=i
					holdId=i
					printf ("Holdings ID found in "$i"\\n")
					break
				case "holdingid":
					holdIdpos=i
					holdId=i
					printf ("Holdings ID found in "$i"\\n")
					break
				case "holdingsid":
					holdIdpos=i
					holdId=i
					printf ("Holdings ID found in "$i"\\n")
					break
				case "holrecordid":
					holdIdpos=i
					holdId=i
					printf ("Holdings ID found in "$i"\\n")
					break
				case "intnote":
					if (itemfile == 0) {
						intnote=i
						printf ("Internal note was found in "$i"\\n")
					}
					break
				case "notecheckin":
					if (itemfile == 0) {
						notecheckin=i
						printf ("Checkin note was found in "$i"\\n")
					}
					break
				case "staffnote":
					if (itemfile == 0) {
						staffnote=i
						printf ("Staff note was found in "$i"\\n")
					}
					break
				case "staffnote2":
					if (itemfile == 0) {
						staffnote2=i
						printf ("Staff note was found in "$i"\\n")
					}
					break
				case "acquisitionstatus":
					if (itemfile == 0) {
						acquisitionstatus=i
						printf ("Acq status note was found in "$i"\\n")
					}
					break
				case "actionnote":
					if (itemfile == 0) {
						actionNote=i
						printf ("Action note was found in "$i"\\n")
					}
					break
				case "bindingnote":
					if (itemfile == 0) {
						bindingNote=i
						printf ("Binding note was found in "$i"\\n")
					}
					break
				case "copynote":
					if (itemfile == 0) {
						copyNote=i
						printf ("Copy note was found in "$i"\\n")
					}
					break
				case "ownershipnote":
					if (itemfile == 0) {
						ownershipNote=i
						printf ("Ownership note was found in "$i"\\n")
					}
					break
				case "publicnote":
					if (itemfile == 0) {
						publicNote=i
						printf ("Public note was found in "$i"\\n")
					}
					break
				case "holdingstype":
					if (itemfile == 0) {
						recType=i
						printf ("Holdings type was found in "$i"\\n")
					}
					break
			}
		}

	if (! bibId) {  printf ("\\nNo valid bib ID field could be found\\n"); exit }

	if (alma_source == 0) {
		if (! location ) {  printf ("\\nNo valid location field could be found\\n"); exit }
		if (! callNumPos && ! callNumFallback ) {  emptyCall = 1 } else { emptyCall = 0 }
		if (! callNumPos && callNumFallback > 0 ) { callNumPos = callNumFallback; callNumFallback = "" }
	}

	printf("\\n")
	if (! recType) {  printf ("No record type field detected, defaulting to Single part holdings\\n") }
	if (! callType) {  printf ("No call number type field detected, setting second indicator in 852 to "callTypeDefault"\\n") }
	printf("\\n")
	}

	if (length($0) > 10000) {
		 for (field = 1; field <= NF; ++field) {
			if (length($field) > 9900) { $field = substr($field, 1, 9900) }
		}
	}


	gsub(/"/, "", $0) 

	if (alma_source == 0) {
		gsub(/^ */, "", $location) 
		gsub(/ *$/, "", $location) 
	
	}

	if (emptyCall == 0) {
		if (callNumPos > 0) {callNum = $callNumPos}
		if (callNumFallback > 0 && length($callNumPos) == 0) {callNum = $callNumFallback}
	} else {
		if (NR == 1) { callNum = "callNum" } else { callNum = "" }
	}

	if (! holdIdpos) {holdId = $bibId""$location""callNum; gsub(/[^a-zA-Z0-9]/, "", holdId)} else { holdId = $holdIdpos }


	build_mfhd()
}
END { 
	if (badawk != 1) {
		printf ("Records processed: %d Records created: %d Output file: %s\\n\\n", record_counter, created, OUTFILE)
	}
}

ENDOFAWK

echo -e "${awkscript}" > tmp_mfhdsfromtsv
chmod 700 tmp_mfhdsfromtsv

awk -v ORS=$'\x1d' -v RS='\n' -v OFS=$'\x1e' -v FS='\t' -v SFS=$'\x1f' -v OUTFILE="${outfile}" -b -f tmp_mfhdsfromtsv "${infile}"

rm -f tmp_mfhdsfromtsv

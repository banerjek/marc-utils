sourcefile="${1}"
mergefile="${2}"

if [[ -z "${mergefile}" ]];then
	echo
	echo "You must supply a source file and a merge file"
	echo
	echo "Usage: marcmerge [sourcefile] [mergefile]"
	echo 
	exit
fi

echo
echo "Starting processing. Please wait"
echo

read -r -d '' awkscript << "ENDOFAWK"
#!/usr/bin/awk -f 

BEGIN { 
	merged_records=not_merged_records=0
	subfield_regex=SFS"."
	validdate="^[^0-9]*([0-9][0-9][0-9][0-9])[^0-9]"
	MERGEREPORT = "merged_records.tsv"
	MERGEFILE = "merged_records.mrc"
	NOTMERGEREPORT = "not_merged_records.tsv"
	NOTMERGEFILE = "not_merged_records.mrc"
	
	printf "%s", "mergeId\\ttag999\\ttag001\\ttag907a\\ttitle\\tpubdata\\tedition\\tpagination\\trecordType\\n" > MERGEREPORT
	printf "%s", "mergeId\\ttag001\\ttag907a\\ttitle\\tpubdata\\tedition\\tpagination\\n" > NOTMERGEREPORT
	printf "%s\\n\\n", "Creating ids for source file. Please be patient."


      if (length("Ð°") != 2) {
                badawk = 1
                printf("Your version of awk does not support marcmerge  -- you need a version that supports the -b switch\\n")
                exit
      }
}

function extract_subfield(subfield) {
	subregex = SFS""subfield"([^"SFS"]*)"
	if (match(varfield, subregex, subarray)) {
    		return subarray[1]
	} else {
		return ""
	}
}

function longest_number(getstring) {
	longest_num = ""
	max_len = 0
	startpos = 1

	while (match(substr(getstring, startpos), /[[:digit:]]+/)) {
		num = substr(getstring, startpos + RSTART - 1, RLENGTH)
		if (RLENGTH > max_len) {
			max_len = RLENGTH
			longest_num = num
		}
		startpos = startpos + RSTART + RLENGTH - 1
	}
	return longest_num
}

function getfixedfield() {
	fixedfield = substr(record_content, starting_pos + 1, field_length - 1)
}

function getvarfield() {
	varfield = substr(record_content, starting_pos + 3, field_length - 4)
}

function extract_tags() {
	for (d_iter=1; d_iter<=directory_length; d_iter=d_iter+12) {
		marc_tag = substr(directory, d_iter, 3)
		field_length = substr(directory, d_iter + 3, 4) + 0
		starting_pos = substr(directory, d_iter + 7, 5) + 0

		switch(marc_tag) {
			case "001":
				getfixedfield()
				tag001 = fixedfield
				break
			case "007":
				getfixedfield()
				tag007 = fixedfield
				if (substr(tag007, 1, 2) == "cr"){ format="e"}
				break
			case "008":
				gooddate = 0
				getfixedfield()

				tag008 = fixedfield
	
				date008 = substr(tag008, 12, 4)
				if (date008 ~ /[12][0-9][0-9][0-9]/) {
					gooddate = 1
					pubdate = date008"_"
				}
	
				if (gooddate == 0){ 
					date008 = substr(tag008, 8, 4)
					if (date008 ~ /[12][0-9][0-9][0-9]/) {
						gooddate = 1
						pubdate = date008"_"
					}
				}
				break
			case "086":
				getvarfield()
				tag086 = varfield
				tag086 = extract_subfield("a")
				gsub(/[[:punct:][:space:]]/, "", tag086)
				tag086 = tag086"_"
				break
			case "100":
			case "110":
			case "111":
			case "130":
				getvarfield()
				tagme = extract_subfield("a")
				gsub(/[[:punct:][:space:]]/, "", tagme)
				tagme = tolower(substr(tagme, 1, 5)"_")
				break
			case "245":
				getvarfield()
				tag245 = varfield
				title = tag245
				gsub(subfield_regex, " ", title)
	
				gsub(/&/, "", tag245)
				tag245a = extract_subfield("a")
				tag245b = extract_subfield("b")
				tag245h = extract_subfield("h")
				tag245p = extract_subfield("p")
				tag245n = extract_subfield("n")
				sub(/^(a |an |the )/, "", tag245a)
	
				if (match(/electronic/, 245h)){ format="e"}
			
				tag245 = tag245a""tag245b""tag245p
				gsub(/[[:punct:][:space:]]/, "", tag245)
				tag245 = substr(tag245, 1, 70)"_"
				tag245 = tolower(tag245"_")
				break
			case "250":
				getvarfield()
				edition = varfield
				gsub(subfield_regex, " ", edition)
	
				tag250 = extract_subfield("a")
				check250 = longest_number(tag250)
	
				if (! check250 ~ /[1-9]/) {
					sub(/fir/, "1", tag250)
					sub(/sec/, "2", tag250)
					sub(/thi/, "3", tag250)
					sub(/fou/, "4", tag250)
					sub(/fif/, "5", tag250)
					sub(/six/, "6", tag250)
					sub(/sev/, "7", tag250)
					sub(/eig/, "8", tag250)
					sub(/nin/, "9", tag250)
					sub(/ten/, "10", tag250)
				} else {
					tag250 = check250
				}
				tag250 = tag250"_"
				break
			case "260":
				getvarfield()
				tag260 = varfield
				pubdata = tag260
				gsub(subfield_regex, " ", pubdata)
				tag260b = extract_subfield("b")
	
				gsub(/[[:punct:][:space:]]/, "", tag260b)
				tag260b = tolower(substr(tag260b, 1, 5))
	
				if (gooddate == 0) {
					tag260c = extract_subfield("c")
					date260 = gensub(validdate, "\\\1", "1", tag260c)
	
					if (date260 ~ /[0-9][0-9][0-9][0-9]/) { 
						gsub(/^[0-9]/, "", date260)
						date260 = substr(date260, 1, 4)
						gooddate = 2 
						pubdate = date260"_"
					}
				}
				break
			case "264":
				getvarfield()
				tag264 = varfield
				pubdata = tag264
				gsub(subfield_regex, " ", pubdata)
	
				tag264b = extract_subfield("b")
	
				publisher = tag264b
	
				tag264b = tolower(substr(tag264b, 1, 5))
				gsub(/[[:punct:][:space:]]/, "", tag264b)
	
				if (gooddate != 1 ) {
					tag264c = extract_subfield("c")
					tag264c = gensub(validdate, "\\\1", "1", tag264c)
	
					if (tag264c ~ /[0-9][0-9][0-9][0-9]/) { 
						gsub(/^[0-9]/, "", tag264c)
						tag264c = substr(tag264c, 1, 4)
						pubdate = tag264c
						pubdate = pubdate"_"
					}
				} 
				break
			case "300":
				getvarfield()
				tag300 = varfield
				pagination = tag300
				gsub(subfield_regex, " ", pagination)
				tag300 = extract_subfield("a")
				tag300 = longest_number(tag300)"_"
				break
			case "880":
				getvarfield()
				tag880 = varfield
				subtag=substr(tag880, 3, 3)
	
				switch(subtag) {
					case "100":
					case "110":
					case "111":
					case "130":
						tagme = extract_subfield("a")
						gsub(/[[:punct:][:space:]]/, "", tagme)
						tagme = tagme"_"
						break
					case "245":
						tag245a =  extract_subfield("a")
						tag245b =  extract_subfield("b")
						tag245p =  extract_subfield("p")
						tag245 = tag245a""tag245b""tag245p
						gsub(/[[:punct:][:space:]]/, "", tag245)
						tag245 = tag245"_"
						#tag245 = substr(tag245, 1, 70)"_"
						break
					default:
						break	
				}
				break
			case "907":
				getvarfield()
				tag907a = extract_subfield("a")
				break
			case "999":
				getvarfield()
				tag999i = extract_subfield("i")
				break
			default:
				break
		}
	}
}

{

leader=substr($0,1,24)
baseaddress=substr(leader,13, 5) + 0
directory=substr($0,25, baseaddress - 25)
directory_length=length(directory) 
directory_check=(directory_length % 12)
record_content=substr($0, baseaddress + 1)
bib_mattype=substr(leader, 7, 1)
holdings_type=substr(leader, 8, 1)

tag001=tag008=tag245=tag245a=tag245b=tag245p=tag250=tag260=tag264=tag264b=tag264c=date260=date264=tag907a=tag999i=""
tag250="1_"
tagme=pubdate=tag300=tag086="_"
mergeId=title=pubdata=edition=pagination=tag001=""
format="p"

if (directory_check == 0) {
	record_type = substr(leader, 7, 1)
	extract_tags()
	mergeId = tag245""tagme""tag264b""pubdate""tag250""tag300""tag086""format

	if (NR == FNR) {
		outstring = mergeId"\\t"tag999i"\\t"tag001"\\t"tag907a"\\t"title"\\t"pubdata"\\t"edition"\\t"pagination
		source_record[mergeId] = outstring
		source_999i[mergeId] = tag999i
		if (NR % 1000 == 0){ printf "Source IDs created: "NR"\\r" }
	} else {
		if (source_record[mergeId]) {
			outstring = mergeId"\\t"source_999i[mergeId]"\\t"tag001"\\t"tag907a"\\t"title"\\t"pubdata"\\t"edition"\\t"pagination
			merged_records++

			if (mergeId != lastMergeId) {
				lastMergeId = mergeId
				printf "%s\\tSOURCE\\n", source_record[mergeId] > "merged_records.tsv"
				printf "%s\\tMERGE\\n", outstring > MERGEREPORT
				print $0 > MERGEFILE
			} else {
				printf "%s\\n", outstring > MERGEREPORT
				print $0 > MERGEFILE
			}
		} else { 
			outstring = mergeId"\\t"tag001"\\t"tag907a"\\t"title"\\t"pubdata"\\t"edition"\\t"pagination
			not_merged_records++
			printf "%s\\n", outstring > NOTMERGEREPORT
			print $0 > NOTMERGEFILE
		}
		if (NR % 1000 == 0) {
			printf "Merged records: %s Not merged records: %s\\r", merged_records, not_merged_records
		}
	}
}


}
END { printf "\\n\\nProcessing complete. Reports can be found in merged_records.tsv and not_merged_records.tsv.\\nMaps of merge activity can be found in merged_map.tsv and not_merged_map.tsv \\nFiles can be found in merged_records.mrc and not_merged_records.mrc\\n\\n" }
ENDOFAWK

echo -e "${awkscript}" > tmp_checkmarc
chmod 700 tmp_checkmarc

awk -v RS=$'\x1d' -v ORS=$'\x1d' -v SFS=$'\x1f' -v FS=$'\x1e' -v OFS=$'\x1e' -b -f tmp_checkmarc "${sourcefile}" "${mergefile}"
echo

(head -1 merged_records.tsv && tail -n +2 merged_records.tsv | sort -k1,1) > tmp
mv tmp merged_records.tsv

rm -f tmp_checkmarc

if [[ -z $3 ]];then
	echo "Adds a MARC field to every record in a file"
	echo
	echo "Usage: marcaddfromfile [marcfile] [tagfile] [idtag]"
	echo 
	echo "tagfile should be 3 column tab delimited containing identifier, tag to insert, and content"
	echo

	exit
else
	marcfile="${1}"
	tagfile="${2}"
	idtag=${3}
	num_mapped=$(wc -l ${tagfile} |cut -d " " -f1)
	fi

fi

### no error correction or accommodation for bad directories -- use marcfix first

fileroot=$(echo "${marcfile}" | sed 's/\.....\?$//')
outfile="${fileroot}_fixed.mrc"

read -r -d '' awkscript << "ENDOFAWK"
#!/usr/bin/awk -f 

BEGIN { 
        if(length("Ð°") != 2) {
                badawk = 1
                printf("Your version of awk does not support marcadd -- you need a version that supports the -b switch\\n")
                exit
        }
	found = 0
	matched_records = 0
	VALUE = VALUE""FS ### add end of field marker
	VALUE_LENGTH=sprintf("%04d", length(VALUE))
}

function check_match() {
	leader=substr($0,1,24)
	baseaddress=substr(leader,13, 5) + 0
	directory=substr($0,25, baseaddress - 25)
	directory_length=length(directory) 
	directory_check=(directory_length % 12)
	record_content=substr($0, baseaddress + 1)
	
	IDTAG3 = substr(IDTAG, 1, 3)
	
	found = 0
	
	if (directory_check == 0) {
		for (i=1; i<=directory_length; i=i+12) {
			if (substr(directory, i, 3) == IDTAG3) {
				field_length = substr(directory, i + 3, 4) + 0
				starting_pos = substr(directory, i + 7, 5)
	
				if (length(IDTAG) == 3) {
					if (IDTAG == "001") { 
						id_content = substr(record_content, starting_pos + 0, field_length - 1)
					} else {
						id_content = substr(record_content, starting_pos + 1, field_length - 1)
					}
				}
		
			   if (length(IDTAG) == 4) {
			      search_subfield = substr(IDTAG, 4, 1)
					field_content = substr(record_content, starting_pos + 1, field_length - 1)
		
			      split(field_content, subfields, SFS)
			
			      for (subfield in subfields) {
			         if (substr(subfields[subfield], 1, 1) == search_subfield) {
			            id_content = substr(subfields[subfield],2)
							break
			         }
			      }
			   }
			}
		}
	
	gsub(" *$", "", id_content)
	
	if (processrecord[id_content] == 1 ) { found = 1 }
}

function add_tag() {
	leader=substr($0,1,24)
	leader1=substr(leader, 6, 7)
	leader2=substr(leader, 18)

	old_base_address=substr(leader,13, 5) + 0
	new_base_address=sprintf("%05d", old_base_address + 12)

	old_record_length=substr(leader,1, 5) + 0
	new_record_length = sprintf("%05d", old_record_length + VALUE_LENGTH + 12) ### plus directory entry

	old_record_content=substr($0, old_base_address + 1)
	new_record_content=old_record_content""VALUE
	new_record_offset=sprintf("%05d", length(old_record_content))

	old_directory=substr($0,25, old_base_address - 25)
	old_directory_length=length(old_directory)

	new_directory_length=length(old_directory) + 12

	new_leader = new_record_length""leader1""new_base_address""leader2

	new_directory=""
	inserted = 0

	for (i=1; i<=old_directory_length; i=i+12) {
		new_entry = substr(old_directory, i, 12) ### new entry is same as old, inserted field is simply added
		old_tag = substr(old_entry, 1, 3)
		old_length = substr(old_entry, 4, 4)
		old_starting_pos = substr(old_entry, 8, 5) 

		if (inserted == 0) {
			if (TAG < old_tag) {
				inserted =1
				new_entry = TAG""VALUE_LENGTH""new_record_offset ### place new tag where last tag was
				new_entry = new_entry""old_entry ### concatenate new and old entries
			} 
			if (i + 12 > old_directory_length) {
				inserted =1
				new_entry = TAG""VALUE_LENGTH""new_record_offset ### place new tag where last tag was
				new_entry = old_entry""new_entry"" ### reverse order so it is last
			} 
		}
		new_directory = new_directory""new_entry	
	}
	new_directory = new_directory""OFS

	$0 = new_leader""new_directory""new_record_content 
}

function find_matching_tags() {

	### identify how many values will be added
	newtags = 0
	addlength = 0
	newcontent = ""

	for (key in marccontent){
		if (key ~ ("^" id_content FS)) {
			split(key, newfield)
			TAG = newfield[2]
			VALUE = newfield[3]""FS
			VALUE_LENGTH=sprintf("%04d", length(VALUE))
			newtags += 1			
			print $0 > OUTFILE
		}
	}
}
{
	if (NR == FNR) {
		gsub(" *$", "", $1)
		processrecord[$1] = 1
		marccontent[$1""MARCFS""$2""MARCFS""$3] = 1
		if (NR == NUMMAPPED){FS = MARCFS;RS = MARCORS}
	} else {

		check_match()
		
		if (found == 1) {
			find_matching_tags()
			matched_records += 1
			found = 0
		}		

		if (FNR % 10000 == 0){ printf "Records processed: %d modified: %d \\r", FNR, matched_records }
	}
}

END { 
	ORS="\\n"
	print "";print NR " records were output to "OUTFILE
}

ENDOFAWK

echo -e "${awkscript}" > tmp_marcadd
chmod 700 tmp_marcadd

awk -v MARCRS=$'\x1d' -v MARCFS=$'\x1e' -v ORS=$'\x1d' -v OFS=$'\x1e' -v SFS=$'\x1f' -v RS=$'\n' -v FS=$'\t' -v MARCFILE="${marcfile}" -v TAGFILE="${tagfile}" -v NUMMAPPED=${num_mapped} -v IDTAG=${idtag} -v OUTFILE="${outfile}" -b -f tmp_marcadd "${infile}"

sleep 1
rm -f tmp_marcadd

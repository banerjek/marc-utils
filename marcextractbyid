if [[ -z $1 || ! -f ids ]];then
	echo
   echo "Usage: marcextractbyid [filename] [marcid_field]"
   echo "This program expects an input file of identifiers named 'ids'"
   echo "marcid_field is optional. If not specified, it will be 001"
   echo
   echo "Usage: marcextractbyid [filename] [marcid_field]"
   echo "Usage: marcextractbyid [filename]"
   echo
   exit
else
   infile="${1}"
   idtag=${2}

   if [[ -z $idtag ]];then idtag="001";fi

fi	

cat ids |tr "\n" $'\x1d' | tr -d "\r" > tmp_ids

fileroot=$(echo "${infile}" | sed 's/\.....\?$//')
matched="${fileroot}_matched.mrc"
notmatched="${fileroot}_not-matched.mrc"

read -r -d '' awkscript << "ENDOFAWK"
#!/usr/bin/awk -f 

BEGIN { foundrecs = 0 
        if (length("Ð°") != 2) {
                badawk = 1
                printf("Your version of awk does not support marcextractbyid -- you need a version that supports the -b switch\\n")
                exit
        }
}
{

if (NR == FNR) {
	gsub("\\n", "", $1)
	gsub(" *$", "", $1)
	seen[$1] = 1
	next
}

leader=substr($0,1,24)
baseaddress=substr(leader,13, 5) + 0
directory=substr($0,25, baseaddress - 25)
directory_length=length(directory) 
directory_check=(directory_length % 12)
record_content=substr($0, baseaddress + 1)

IDTAG3 = substr(IDTAG, 1, 3)

if (directory_check == 0) {
	for (i=1; i<=directory_length; i=i+12) {
		if (substr(directory, i, 3) == IDTAG3) {
			field_length = substr(directory, i + 3, 4) + 0
			starting_pos = substr(directory, i + 7, 5)

			if (length(IDTAG) == 3) {
				if (IDTAG == "001") { 
					id_content = substr(record_content, starting_pos + 0, field_length - 1)
				} else {
					id_content = substr(record_content, starting_pos + 1, field_length - 1)
				}
			}
	
		   if (length(IDTAG) == 4) {
		      search_subfield = substr(IDTAG, 4, 1)
				field_content = substr(record_content, starting_pos + 1, field_length - 2)
	
		      split(field_content, subfields, SFS)
		
		      for (subfield in subfields) {
		         if (substr(subfields[subfield], 1, 1) == search_subfield) {
		            id_content = substr(subfields[subfield],2)
						break
		         }
		      }
		   }
		}
	}

gsub(" *$", "", id_content)

if (seen[id_content] == 1 ) { found = 1 }

id_content = ""

}

if (found == 1 ) {
        foundrecs++
        print $0 > MATCHED
} else {
        notfoundrecs++
        print $0 > NOTMATCHED
}

recordcounter++

if (NR % 10000 == 0) if (NR % 10000 == 0){ printf "Records searched: %d Matching: %d Not matching: %d \r", recordcounter, foundrecs, notfoundrecs }

}
END { printf "Records searched: %d Matching: %d Not matching: %d \r", recordcounter, foundrecs, notfoundrecs }
ENDOFAWK

echo -e "${awkscript}" > tmp_checkmarc
chmod 700 tmp_checkmarc


awk -v ORS=$'\x1d' -v FS=$'\x1e' -v RS=$'\x1d' -v SFS=$'\x1f' -v IDTAG=${idtag} -v MATCHED="${matched}" -v NOTMATCHED="${notmatched}" -b -f tmp_checkmarc "tmp_ids" "${infile}"
echo
echo

echo "Records matching ID file were output to ${matched}                     " 
echo "Records not matching ID file were output to ${notmatched}                     " 
echo

rm -f tmp_checkmarc tmp_ids


if [[ -z $1 || -z $2 ]];then
	echo "Usage: marc2tsv [filename] [list of MARC fields]"
	echo "Example: marc2tsv myfile.mrc ldr 100 245 650"
	echo "Use \"ldr\" to extract the leader"
	echo 
	echo "Whole tags are extracted, leading subfield marker (usually a) is stripped"
	echo "Subfield delimiter in MARC is hex 1F and left in all but first field"
	echo
	echo "001 is output by default. "  
	echo "Repeated fields are subdelimited with a semicolon"
	echo
	exit
else
	infile="${1}"
	tags=($@)
	tags[0]="001"
	taglist="$(echo ${tags[@]})"

	fileroot=$(echo "${infile}" | sed 's/\.....\?$//')
	outfile="${fileroot}.tsv"
fi


read -r -d '' awkscript << "ENDOFAWK"
#!/usr/bin/awk -f 

BEGIN { records_found = 0 
        if (length("Ð°") != 2) {
                badawk = 1
                printf("Your version of awk does not support marc2tsv -- you need a version that supports the -b switch\\n")
                exit
        } else {

		split(TAGLIST, tags, " ")
		num_tags = length(tags)
		for (i=1;i<=num_tags;i++) { marc_tag = tags[i]; record[marc_tag] = "";}
	}
}

function extract_subfields() { 
	if (length(marc_tag) == 4) {
		search_subfield = substr(marc_tag, 4, 1)

		split(field_content, subfields, SFS)
		field_content = ""

		for (subfield in subfields) {
			if (substr(subfields[subfield], 1, 1) == search_subfield) {
				tmpfield = substr(subfields[subfield],2)

				if (field_content == "") { 
					field_content = tmpfield
				} else {
					if (subfield ~ /[0-9a-zA-Z/-]/) {
						field_content = field_content"; "tmpfield
					}
				}
			}	
		}
		if (substr(field_content, 1, 2) == SFS"a") { field_content = substr(field_content, 3) }
	}
}

function extract_tag() {
	if (marc_tag == "ldr"){ record[marc_tag] = leader }

	for (i=1; i<=directory_length; i=i+12) {
		if (substr(directory, i, 3) == substr(marc_tag, 1, 3)) {

			field_length = substr(directory, i + 3, 4) + 0
			starting_pos = substr(directory, i + 7, 5) 
			field_content = ""

			if (substr(record_content, starting_pos + 3, 1) == SFS) {
				field_content = substr(record_content, starting_pos + 5, field_length - 5)
			} else {
				field_content = substr(record_content, starting_pos + 1, field_length - 1)
			}

			extract_subfields()

			if (record[marc_tag] != "") {
				record[marc_tag] = record[marc_tag]"; "field_content	
			} else {
				record[marc_tag] = field_content
			}
		}
	}
}

{

for (marc_tag in record) {record[marc_tag] = ""} # initialize temp array to keep track of repeated fields

leader=substr($0,1,24)
baseaddress=substr(leader,13, 5) + 0
directory=substr($0,25, baseaddress - 25)
directory_length=length(directory) 
directory_check=(directory_length % 12)
record_content=substr($0, baseaddress + 1)

if (directory_check == 0) {
	for (marc_tag in record) { extract_tag() }

	lineout = ""

	if (NR == 1) { 
		for (i=1;i<=num_tags;i++) {
			if (i == 1) {
				lineout = tags[i]
			} else {
				lineout = lineout"\t"tags[i]
			}
		}
		print lineout > OUTFILE
		lineout = ""
	}
		
	for (i=1;i<=num_tags;i++) {
		marc_tag = tags[i]
		if (i == 1) {
			lineout = record[marc_tag]
		} else {
			lineout = lineout"\t"record[marc_tag] 
		}
	}
	print lineout >> OUTFILE
}

if (NR % 10000 == 0){ printf "Records processed: "NR"\r" }

}
END { print NR" records have been processed and sent to "OUTFILE }

ENDOFAWK

echo -e "${awkscript}" > tmp_checkmarc
chmod 700 tmp_checkmarc


awk -v RS=$'\x1d' -v ORS="\n" -v SFS=$'\x1f' -v FS=$'\x1e' -v OFS="\t" -v TAGLIST="${taglist}" -v OUTFILE="${outfile}" -b -f tmp_checkmarc "${infile}"
echo

rm -f tmp_checkmarc


knownsystems=("destiny" "eos" "opals" "sierra" "sirsi" "softlink" "wms")

if [[ -z $2 ]];then
	echo "Usage: marc-itemextract [filename] [systemtype] "
	echo 
	echo "001 is automatically stored and output."  
	echo "Items are expected to be one item per MARC tag"
	echo
	echo "The following systems are known"
	echo  ${knownsystems[@]}
	exit
else
	infile="${1}"
	system="${2}"
	tags=()
	labels=()

	fileroot=$(echo "${infile}" | sed 's/\.....\?$//')
	outfile="${fileroot}.tsv"
	rm -f ${outfile}
fi

foundsystem=0

for checksystem in "${knownsystems[@]}";do
	if [[ ${system} == $checksystem ]];then foundsystem=1;fi
done


if [[ ${foundsystem} -eq 0 ]];then
	echo "You must specify a known system from the following"
	echo  ${knownsystems[@]}
	exit
fi

## be sure to map call number and location to holdid

if [[ ${system} == "destiny" ]];then
	special[1]="852"

	identifier="001"
	item_field="852p"
	item_call_subfield="h"
	location_subfield="b"

	tags[1]="p"
	tags[2]="h"
	tags[3]="u"
	tags[4]="b"
	tags[5]="j"
	tags[6]="t"
	tags[7]="z"
	tags[8]="r"

	labels[1]="barcode"
	labels[2]="call#"
	labels[3]="itype"
	labels[4]="location"
	labels[5]="volume"
	labels[6]="copy"
	labels[7]="note"
	labels[7]="catdate"
fi

if [[ ${system} == "eos" ]];then
	identifier="001"
	item_field="949p"
	item_call_subfield="k"
	location_subfield="b"

	tags[1]="p"
	tags[2]="k"
	tags[3]="o"
	tags[4]="b"

	labels[1]="barcode"
	labels[2]="call#"
	labels[3]="itype"
	labels[4]="location"
fi

if [[ ${system} == "opals" ]];then
	identifier="001"
	item_field="852p"
	item_call_subfield="h"
	location_subfield="b"

	tags[1]="p"
	tags[2]="k"
	tags[3]="h"
	tags[4]="i"
	tags[5]="m"
	tags[6]="v"
	tags[7]="t"
	tags[8]="3"
	tags[9]="9"

	labels[1]="barcode"
	labels[2]="call#prefix"
	labels[3]="call#"
	labels[4]="call#"
	labels[5]="call#suffix"
	labels[6]="volume"
	labels[7]="copy"
	labels[8]="mattype"
	labels[9]="price"
fi

if [[ ${system}  == "sierra"  ]];then
	bib_call_field="090"
	identifier="907a"
	item_field="945l"
	item_call_subfield="a"
	location_subfield="l"

	tags[1]="a"
	tags[2]="b"
	tags[3]="c"
	tags[4]="g"
	tags[5]="i"
	tags[6]="j"
	tags[7]="l"
	tags[8]="m"
	tags[9]="n"
	tags[10]="o"
	tags[11]="p"
	tags[12]="q"
	tags[13]="r"
	tags[14]="s"
	tags[15]="t"
	tags[16]="u"
	tags[17]="v"
	tags[18]="w"
	tags[19]="x"
	tags[20]="y"
	tags[21]="z"

	labels[1]="call_marc"
	labels[2]="call_nonmarc"
	labels[3]="volume"
	labels[4]="copy"
	labels[5]="barcode"
	labels[6]="agency"
	labels[7]="location"
	labels[8]="msg"
	labels[9]="note"
	labels[10]="icode2"
	labels[11]="price"
	labels[12]="imsg"
	labels[13]="opacmsg"
	labels[14]="status"
	labels[15]="itype"
	labels[16]="totchk"
	labels[17]="totrenwl"
	labels[18]="ytdcirc"
	labels[19]="lycirc"
	labels[20]="record#item"
	labels[21]="created"
fi

if [[ ${system}  == "sirsi"  ]];then
	bib_call_field="090"
	identifier="001"
	item_field="949p"
	item_call_subfield="k"
	location_subfield="b"

	tags[1]="b"
	tags[2]="c"
	tags[3]="d"
	tags[4]="g"
	tags[5]="j"
	tags[6]="k"
	tags[7]="n"
	tags[8]="o"
	tags[9]="p"
	tags[10]="v"
	
	labels[1]="location"
	labels[2]="copy"
	labels[3]="cat_date"
	labels[4]="note"
	labels[5]="callprefix"
	labels[6]="call"
	labels[7]="note"
	labels[8]="itype"
	labels[9]="barcode"
	labels[10]="volume"
fi

if [[ ${system}  == "softlink"  ]];then
	identifier="907a"
	item_field="995a"
	item_call_subfield="k"
	location_subfield="a"

	tags[1]="a"
	tags[2]="j"
	tags[3]="y"
	tags[4]="Z"
	tags[5]="h"
	tags[6]="e"
	tags[7]="u"
	tags[8]="J"
	
	labels[1]="location"
	labels[2]="call"
	labels[3]="barcode"
	labels[4]="itype"
	labels[5]="copy"
	labels[6]="accession"
	labels[7]="status"
	labels[8]="note"
fi

if [[ ${system} == "wms"  ]];then
	identifier="004"
	item_field="876p"
	item_call_subfield=""
	location_subfield=""

	tags[1]="p"
	tags[2]="3"
	tags[3]="x"
	tags[4]="z"

	labels[1]="barcode"
	labels[2]="volume"
	labels[3]="imsg"
	labels[4]="opacmsg"
fi

taglist="$(echo ${tags[@]})"
labellist="$(echo ${labels[@]})"
speciallist="$(echo ${special[@]})"

echo "Starting processing. Please wait"

read -r -d '' awkscript << "ENDOFAWK"
#!/usr/bin/awk -f 

BEGIN { records_found = 0 

		subfield_regex=SFS"."
		not_SFS="[^"SFS"]*"

      if (length("Ð°") != 2) {
                badawk = 1
                printf("Your version of awk does not support  -- you need a version that supports the -b switch\\n")
                exit
        } else {

		split(TAGLIST, tags, " ")
		split(LABELLIST, labels, " ")
		split(SPECIALLIST, special, " ")

		num_tags = length(tags)

		required_item_subfield = substr(ITEMFIELD, 4, 1)
		ITEMFIELD = substr(ITEMFIELD, 1, 3)
	}
}

function destiny_852() { 
	# material type
	sub("@a", SFS"u", field_content)
	vol_subfield=""

	# cat date
	sub("@c", SFS"r", field_content)

	# volume info is in @j@j@j@i@i@i with label in j
	# and enum in @i. Pair things up and string it together

	match(field_content, "@j[^"SFS"]*", val)
	split(val[0], volume_info, "@")

	for (i in volume_info) {
		sub(/^[ij]/, "", volume_info[i])
	}
	vol_subfield = volume_info[2]""volume_info[5]", "volume_info[3]""volume_info[6]", "volume_info[4]""volume_info[7]
	sub("[ ,]*$", "", vol_subfield)
	field_content = field_content""SFS"j"vol_subfield

	# pitch all subfield b's
	sub("@b", SFS"8", field_content)
	gsub("@"not_SFS, "", field_content)
}

function extract_subfields() { 
	real_item = 0
	for (j=1;j<=num_tags;j++) { item_subfield[j] = "" }

	split(field_content, subfields, SFS)
	
	for (j=1;j<=num_tags;j++) {
		for (subfield in subfields) {
			if (substr(subfields[subfield], 1, 1) == tags[j]) {
				if (tags[j] == required_item_subfield) {real_item = 1}
				if (item_subfield[j] == "") {
					item_subfield[j] = substr(subfields[subfield],2)
					gsub(/^[ \\-]*$/, "", item_subfield[j])
				} else { 
					item_subfield[j] = item_subfield[j]";"substr(subfields[subfield],2) 
				}

				gsub(/^ *+| +$/, "", item_subfield[j])

				if (tags[j] == LOCATION) { location = item_subfield[j] }
				if (tags[j] == CALL) { callnum = item_subfield[j] }
				if (tags[j] == CALL_SUFFIX) { callnum = callnum" "item_subfield[j] }
			}	
		}
	}

	if (IDENTIFIER == "004") {
		holdid = tag001 
		gsub(/[^a-zA-Z0-9]/, "", bibno)
	} else {
		holdid =  bibno""location""callnum
	}

	gsub(/[^a-zA-Z0-9]/, "", holdid)

	lineout = tag001"\t"bibno"\t"holdid"\t"bib_call"\t"rec_type

	for (j=1;j<=num_tags;j++) {
		lineout = lineout"\t"item_subfield[j]
	}
	
	if (bibno != "" && real_item == 1) { print lineout >> OUTFILE }
	lineout = ""
}

function extract_identifiers() {

	tag001=tag004=tag007=bibno=bib_call=holdid=callnum=location=""
	tagid = substr(IDENTIFIER, 4, 1)

	for (i=1; i<=directory_length; i=i+12) {
		if (substr(directory, i, 3) == "001") {

			field_length = substr(directory, i + 3, 4) + 0
			starting_pos = substr(directory, i + 7, 5) 

			tag001 = substr(record_content, starting_pos, field_length - 1)
			gsub(/^ *+| +$/, "", tag001)
			gsub(FS, "", tag001)
		}
		if (substr(directory, i, 3) == "004") {

			field_length = substr(directory, i + 3, 4) + 0
			starting_pos = substr(directory, i + 7, 5) 

			tag004 = substr(record_content, starting_pos, field_length - 1)
			gsub(/^ *+| +$/, "", tag004)
		}

		if (bibno == "") {
			if (substr(directory, i, 3) == substr(IDENTIFIER, 1, 3)) {

				field_length = substr(directory, i + 3, 4) + 0
				starting_pos = substr(directory, i + 7, 5) 

				split(field_content, subfields, SFS)

				bibno = substr(record_content, starting_pos, field_length - 1)
				split(bibno, subfields, SFS)
	
				for (subfield in subfields) {
					if (tagid == substr(subfields[subfield], 1, 1)) {
						bibno = substr(subfields[subfield],2)
					}	
				}
			#gsub(/^ *+| +$/, "", bibno)
			gsub(/[^a-zA-Z0-9]/, "", bibno)
			}
		}
	}
}

function extract_items() {
	for (i=1; i<=directory_length; i=i+12) {
		marc_tag = substr(directory, i, 3)

		####
      if (marc_tag == BIB_CALL_FIELD) {

         field_length = substr(directory, i + 3, 4) + 0
         starting_pos = substr(directory, i + 7, 5)

         bib_call = substr(record_content, starting_pos + 5, field_length - 5)
         gsub(subfield_regex, " ", bib_call)
         }

		if (marc_tag == ITEMFIELD) {

			field_length = substr(directory, i + 3, 4) + 0
			starting_pos = substr(directory, i + 7, 5) 
			field_content = ""

			if (substr(record_content, starting_pos + 3, 1) == SFS) {
				field_content = substr(record_content, starting_pos + 3, field_length - 3)
			} else {
				field_content = substr(record_content, starting_pos + 1, field_length - 1)
			}

			for (special_iter in special) { 
				if (marc_tag == special[special_iter]) { 
					functionByVariable=SYSTEM"_"marc_tag

					@functionByVariable()		
				} 
			}

			extract_subfields()
		}
	}
}

{

leader=substr($0,1,24)
baseaddress=substr(leader,13, 5) + 0
directory=substr($0,25, baseaddress - 25)
directory_length=length(directory) 
directory_check=(directory_length % 12)
record_content=substr($0, baseaddress + 1)
rec_type=substr(leader, 8, 1)

if (directory_check == 0) {
	if (NR == 1) { 
		lineout = "tag001\tbib_no\tholdid\tbib_call\trectype"
		for (i=1;i<=num_tags;i++) {
			lineout = lineout"\t"labels[i]
		}
		print lineout > OUTFILE
		lineout = ""
	}
	extract_identifiers()
	extract_items()
}

if (NR % 10000 == 0){ printf "Records processed: "NR"\r" }

}
END { print NR" records have been processed and sent to "OUTFILE }

ENDOFAWK

echo -e "${awkscript}" > tmp_checkmarc
chmod 700 tmp_checkmarc

awk -v RS=$'\x1d' -v ORS="\n" -v SFS=$'\x1f' -v FS=$'\x1e' -v OFS="\t" -v IDENTIFIER="${identifier}" -v ITEMFIELD="${item_field}" -v CALL="${item_call_subfield}" -v BIB_CALL_FIELD="${bib_call_field}" -v LOCATION="${location_subfield}" -v TAGLIST="${taglist}" -v LABELLIST="${labellist}" -v SPECIALLIST="${speciallist}" -v SYSTEM="${system}" -v OUTFILE="${outfile}" -b -f tmp_checkmarc "${infile}"
echo

rm -f tmp_checkmarc

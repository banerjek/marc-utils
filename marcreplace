if [[ -z $1 ]];then
	echo "Replaces first occurrence of expression in a marc field based on regex match"
	echo "If only a filename is specified, trailing spaces are trimmed from 001 and 004"
	echo
	echo "Usage: marcreplace [filename] [marcfield] '[searchexpression]' '[replaceexpression]'"
	echo "Usage: marcreplace [filename]"
	echo 
	echo "To target subfields, append the subfield to the marcfield, e.g. "marcreplace filename 245a '[searchexpression]' '[replaceexpression]'
	echo
	echo "To prepend specify '^', e.g. marcreplace [filename] [marcfield] ^ '[replaceexpression]'"
	echo "To suffix specify '$', e.g. marcreplace [filename] [marcfield] $ '[replaceexpression]'"
	echo "To trim trailing spaces from 001/004, specify only filename, e.g. marcreplace [filename]"

	exit
else
	infile="${1}"
	marctag=${2}
	search="${3}"
	replace="${4}"

	tag=${marctag:0:3}

	if [[ ${#marctag} == 4 ]];then
        	subfield=${marctag:3:1}
	fi

fi

fileroot=$(echo "${infile}" | sed 's/\.....\?$//')
outfile="${fileroot}_fixed.mrc"


read -r -d '' awkscript << "ENDOFAWK"
#!/usr/bin/awk -f 

BEGIN { 
        if(length("Ð°") != 2) {
                badawk = 1
                printf("Your version of awk does not support marcreplace -- you need a version that supports the -b switch\\n")
                exit
        }

	### modify search if end of field search detected
	if (substr(SEARCH, length(SEARCH), 1) == "$") {
		if (TAG ~ /^00/) { 
			SEARCH = substr(SEARCH, 1, length(SEARCH) - 1)""FS
			REPLACE = REPLACE""FS
                }
	}
}

function fix_var_field(){
	if (SUBFIELD != "") {
		num_subfields = length(subfields)
	
		### loop through the subfields skipping the indicators	
		for (subfield=2;subfield<=num_subfields;subfield++) {
			if (substr(subfields[subfield], 1, 1) == SUBFIELD) {
				subfield_content = substr(subfields[subfield], 2)
				sub(SEARCH, REPLACE, subfield_content)
				subfields[subfield] = SUBFIELD""subfield_content
			}
		}
		### and put it back together
		new_field_content = subfields[1]
		for (subfield=2;subfield<=num_subfields;subfield++) { 
			new_field_content = new_field_content""SFS""subfields[subfield]
		}
	} else {
		sub(SEARCH, REPLACE, new_field_content)
	}
}

function fix_field(){
	### by default, old values are good
	new_field_content = field_content
	new_field_length = field_length 

	## special handling for control fields
	if (TAG == marc_tag) {
		if (TAG ~ /^00/) { 
			sub(SEARCH, REPLACE, new_field_content)
		} else {
			fix_var_field()
		}
		new_field_length = length(new_field_content)
	}

	## trim 001/004 if no arguments given
	if (TAG == "" && marc_tag ~ /00[14]/) {
		sub(" +"FS, FS, new_field_content)
		new_field_length = length(new_field_content)
	}

	new_field_length=sprintf("%04d", new_field_length)

	new_directory_address = sprintf("%05d", new_base_address)
	new_base_address = new_base_address + new_field_length

	new_directory_entry = marc_tag""new_field_length""new_directory_address
	new_directory = new_directory""new_directory_entry
	new_record_content = new_record_content""new_field_content
}

{
	leader=substr($0,1,24)
	base_address=substr(leader,13, 5) + 0
	record_content=substr($0, base_address + 1)

	leader_content=substr(leader, 6)

	directory=substr($0,25, base_address - 25)
	directory_length=length(directory)
	record_length = length($0) + 0

	new_base_address = 0
	new_record = ""
	new_directory=""
	new_record_content=""

	### no error correction for bad leaders, use marcfix first
	for (i=1; i<=directory_length; i=i+12) {

		directory_entry = substr(directory, i, 12)
		marc_tag = substr(directory, i, 3)

		field_length = substr(directory, i + 3, 4) ### includes field separator 
		starting_pos = substr(directory, i + 7, 5) + 1 
		
		field_content = substr(record_content, starting_pos, field_length)

		fix_field()

	}
	new_directory = new_directory""OFS

	#### old directory length, base address, and leader content are good
	new_record_length = 25 + directory_length + length(new_record_content) + 1 ### accounts for FS after leader and end of record marker
	new_record_length = sprintf("%05d", new_record_length)

	print new_record_length""leader_content""new_directory""new_record_content > OUTFILE 
	if (NR % 10000 == 0){ printf "Records processed: %d \\r", NR}
}

END { 
	ORS="\\n"
	print "";print NR " records were output to "OUTFILE
}

ENDOFAWK

echo -e "${awkscript}" > tmp_marcreplace
chmod 700 tmp_marcreplace

awk -v RS=$'\x1d' -v ORS=$'\x1d' -v FS=$'\x1e' -v OFS=$'\x1e' -v SFS=$'\x1f' -v TAG="${tag}" -v SUBFIELD="${subfield}" -v SEARCH="${search}" -v REPLACE="${replace}" -v OUTFILE="${outfile}" -b -f tmp_marcreplace "${infile}"

sleep 1
rm -f tmp_marcreplace

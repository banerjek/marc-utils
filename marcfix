filelist=("$@")
rm -f "bad_*${infile}.mrc"
rm -f "${infile}_fixed"


infile="${filelist[0]}"

if [[ -z ${infile} ]];then echo "You must supply a directory or file name";fi

if [[ -f "${infile}" ]];then processType="file";fi
if [[ -d ${infile} ]];then processType="directory";fi

if [[ -z $processType ]];then echo "No files or directory matching the input can be found";fi

read -r -d '' awkscript << "ENDOFAWK"
#!/usr/bin/awk -f 

BEGIN { goodrecs=badrecs=bad001=badleader=baddirectory=bibcount=holdingscount=authoritycount=0
}
function check_fields() {
	OUTFILE = FILEROOT"_fixed.mrc"

	if (directory ~ /[^0-9]/){directory_check = 1;good_directory = 0}

	if (directory_check == 0) {
		for (i=1; i<=directory_length; i=i+12) {
			if (substr(directory, i, 3) == "008") {found008 = 1}
			if (substr(directory, i, 3) == "245") {found245 = 1}
			if (substr(directory, i, 3) ~ /[^0-9a-zA-Z]/) {goodrec = 0}
		}
	} else {
		good_directory = 0
	}

	if ( goodrec == 1 && found008 == 1 && found245 == 1 && directory_check == 0){good_directory=1} else
		{goodrec=0}
}

function check_leader() {
	leader=substr($0,1,24)
	baseaddress=substr(leader,13, 5) + 0
	directory=substr($0,25, baseaddress - 25)
	directory_length=length(directory) 
	directory_check=(directory_length % 12)
	record_length = length($0) + 0
	reported_length = substr($0, 1, 5) - 1

	if (record_length > 99999) {oversized = 1;totaloversized++;print $0 > "tmp_oversized.mrc"}
	
	if (reported_length != record_length){good_length = 0}

	rectype_indicator=substr(leader, 7, 1)

	switch(rectype_indicator) {
		case /^[acdefngijkmoprt@]$/:
			rectype="bib"
			bibcount++
			break
		case /^[uvxy]$/:
			rectype="holdings"
			found245 = 1
			holdingscount++
			break
		case "z":
			rectype="authority"
			found245 = 1
			found008 = 1
			authoritycount++
			break
		default:
			good_leader = 0;
	}

}
{
goodrec=good_directory=good_leader=good_encoding=good_length=1
found008=found245=oversized=0

check_leader()
check_fields()

if ( goodrec == 1 && good_directory == 1 && good_leader == 1 && good_encoding == 1 && good_length == 1){ goodrecs++;print $0 > OUTFILE }else{ badrecs++}
foundbad = 0
if ( good_length == 0){ print $0 > "bad_length_"FILEROOT;badlength++;badlengthtext = " (length: "badlength")";foundbad = 1 }
if ( good_leader == 0 && foundbad == 0){ print $0 > "bad_leader_"FILEROOT;badleader++;badleadertext = " (leader: "badleader")" }
if ( good_directory == 0 && foundbad == 0){ print $0 > "bad_directory_"FILEROOT;baddirectory++;baddirectorytext = " (directory: "baddirectory")";foundbad = 1 }
if ( good_encoding == 0 && foundbad == 0){ print $0 > "bad_encoding_"FILEROOT;badencoding++;badencodingtext = " (encoding: "badencoding")";foundbad = 1 }
if ( found008 == 0 && foundbad == 0){ print $0 > "bad_missing008_"FILEROOT;bad008++;bad008text = " (008: "bad008")";foundbad = 1 }
if ( found245 == 0 && foundbad == 0){ print $0 > "bad_missing245_"FILEROOT;bad245++;bad245text = " (245: "bad245")";foundbad = 1 }
if ( badrecs > 0 ){ badtext = badleadertext""baddirectorytext""bad001text""bad008text""bad010text""bad245text""badencodingtext""badlengthtext }

if (NR % 10000 == 0){ printf "Good records: %d Bad records: %d Issues: %s\r", goodrecs, badrecs, badtext }

}
END { 
ORS=OFS="\\n"
close(OUTFILE)

printf "Good records: %d Bad records: %d Issues: %s\\n\\n", goodrecs, badrecs, badtext
printf "Bib records: %d Holdings records: %d Authority records: %s\\n", bibcount, holdingscount, authoritycount 
print "";print goodrecs " records were output to "OUTFILE" and " badrecs " records were output to the files listed below and prefixed with bad_" 
if (totaloversized > 0) {print totaloversized" oversized were truncated"}
}

ENDOFAWK


process_file() {
	fileroot=$(echo "${marcfile}" | sed 's/\.....\?$//')

	firstnum=$'\x09'
	lastnum=$'\xFF'
	regex="[^${firstnum}-${lastnum}]"

	echo -e "${awkscript}" > tmp_checkmarc
	chmod 700 tmp_checkmarc

	echo "Processing ${marcfile}"	
	
	echo "Detecting and removing nulls"
	tr < "${marcfile}" -d '\000' > "${marcfile}.tmp"
	echo "Detecting and converting carriage returns and newlines to spaces"
	tr < "${marcfile}.tmp" '\n\r' '  ' > "${marcfile}"
	rm ${marcfile}.tmp
		

	awk -v RS=$'\x1d' -v ORS=$'\x1d' -v FS=$'\x1e' -v FILEROOT="${fileroot}" -b -f tmp_checkmarc "${marcfile}"
	sleep 1
	
	ls bad_*"${marcfile}" 2> /dev/null
	echo
}

if [[ $processType == "file" ]];then 
	for marcfile in "${filelist[@]}";do
		process_file "${marcfile}"

		if [[ -f tmp_oversized.mrc ]];then
			marc2text tmp_oversized.mrc
			text2marc tmp_oversized.txt
			cat tmp_oversized.mrc >> "${fileroot}_fixed.mrc"
			rm -f tmp_oversized.*
			echo "Oversized records were appended to ${fileroot}_fixed.mrc"
		fi
	done
	rm -f tmp_checkmarc
fi

if [[ $processType == "directory" ]]; then
	cd "${infile}"
	ls |sed 's/^/echo;marcfix /' > tmp_process
	chmod 700 ./tmp_process
	./tmp_process
	rm -f tmp_process
	rm -f tmp_checkmarc
	cd ..
fi


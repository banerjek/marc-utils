filelist=("$@")
rm -f "bad_*${infile}.mrc"
rm -f "${infile}_fixed"


infile="${filelist[0]}"

if [[ -z ${infile} ]];then echo "You must supply a directory or file name";fi

if [[ -f "${infile}" ]];then processType="file";fi
if [[ -d ${infile} ]];then processType="directory";fi

if [[ -z $processType ]];then echo "No files or directory matching the input can be found";fi

read -r -d '' awkscript << "ENDOFAWK"
#!/usr/bin/awk -f 

BEGIN { 
        if(length("Ð°") != 2) {
                badawk = 1
                printf("Your version of awk does not support marcfix -- you need a version that supports the -b switch\\n")
                exit
        }

	goodrecs=badrecs=bad001=badleader=baddirectory=0
	bad001file="bad_missing001.mrc"
	bad008file="bad_missing008.mrc"
	bad245file="bad_missing245.mrc"
	badencodingfile="bad_encoding.mrc"
	badleaderfile="bad_leader.mrc"
	badlengthfile="bad_length.mrc"
	baddirectoryfile="bad_directory.mrc"
}
function check_fields() {

	if (directory ~ /[^0-9]/){directory_check = 1}

	if (directory_check == 0) {
		for (i=1; i<=directory_length; i=i+12) {
			if (substr(directory, i, 3) == "001") {found001 = 1}
			if (substr(directory, i, 3) == "008") {found008 = 1}
			if (substr(directory, i, 3) == "245") {found245 = 1}
			if (substr(directory, i, 3) ~ /[^0-9a-zA-Z]/) {goodrec = 0}
			if (bibrec == 0 && substr(directory, i, 3) == "852") {found852 = 1}
		}
	}

	if ( goodrec == 1 && found001 == 1 && found008 == 1 && found245 == 1 && found852 == 1 && directory_check == 0){good_directory=1} else
		{goodrec=0;good_directory=0}
}

function check_leader() {
	leader=substr($0,1,24)
	baseaddress=substr(leader,13, 5) + 0
	directory=substr($0,25, baseaddress - 25)
	directory_length=length(directory) 
	directory_check=(directory_length % 12)
	record_length = length($0) + 0
	reported_length = substr($0, 1, 5) - 1
	
	if (reported_length != record_length){good_length = 0}
	if (substr(leader, 21,4) != "4500"){good_leader = 0}
	if (substr(leader, 7, 1)  ~ /[uvxy]/){bibrec = 0;found245 = 1}else{found852 = 1}
	if (substr(leader, 6, 1)  !~ /[acdnp]/){good_leader = 0}
	if (bibrec == 1 && substr(leader,8,1) !~ /[abcdims]/){good_leader = 0}

}
{
goodrec=good_directory=good_leader=good_encoding=good_length=bibrec=1
found001=found008=found245=found852=0

check_leader()
check_fields()
if ( goodrec == 1 && good_directory == 1 && good_leader == 1 && good_encoding == 1 && good_length == 1){ goodrecs++;print $0 > FILENAME"_fixed" }else{ badrecs++}
if ( found001 == 0){ print $0 > "bad_missing001_"FILENAME;bad001++;bad001text = " (001: "bad001")" }
if ( found008 == 0){ print $0 > "bad_missing008_"FILENAME;bad008++;bad008text = " (008: "bad008")" }
if ( found245 == 0){ print $0 > "bad_missing245_"FILENAME;bad245++;bad245text = " (245: "bad245")" }
if ( good_encoding == 0){ print $0 > "bad_encoding_"FILENAME;badencoding++;badencodingtext = " (encoding: "badencoding")" }
if ( good_directory == 0){ print $0 > "bad_directory_"FILENAME;baddirectory++;baddirectorytext = " (directory: "baddirectory")" }
if ( good_leader == 0){ print $0 > "bad_leader_"FILENAME;badleader++;badleadertext = " (leader: "badleader")" }
if ( good_length == 0){ print $0 > "bad_length_"FILENAME;badlength++;badlengthtext = " (length: "badlength")" }
if ( badrecs > 0 ){ badtext = badleadertext""baddirectorytext""bad001text""bad008text""bad245text""badencodingtext""badlengthtext }

if (NR % 10000 == 0){ printf "Good records: %d Bad records: %d Issues: %s\r", goodrecs, badrecs, badtext }

}
END { 
ORS=OFS="\\n"
close(FILENAME"_fixed")

print "";print goodrecs " records were output to " FILENAME"_fixed" " and " badrecs " records were output to the files listed below and prefixed with bad_" }

ENDOFAWK


process_file() {
	firstnum=$'\x09'
	lastnum=$'\xFF'
	regex="[^${firstnum}-${lastnum}]"

	echo -e "${awkscript}" > tmp_checkmarc
	chmod 700 tmp_checkmarc

	echo "Processing ${marcfile}"	
	awk -v RS=$'\x1d' -v ORS=$'\x1d' -v FS=$'\x1e' -b -f tmp_checkmarc "${marcfile}"
	sleep 1
	
	ls bad_*"${marcfile}" 2> /dev/null
	echo
}

if [[ $processType == "file" ]];then 
	for marcfile in "${filelist[@]}";do
		process_file "${marcfile}"
	done
	rm tmp_checkmarc
fi

if [[ $processType == "directory" ]]; then
	cd "${infile}"
	ls |sed 's/^/echo;marcfix /' > tmp_process
	chmod 700 ./tmp_process
	./tmp_process
	rm -f tmp_process
	rm -f tmp_checkmarc
	cd ..
fi


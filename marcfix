filelist=("$@")

rm -f bad_length*
rm -f bad_directory*
rm -f bad_missing*

infile="${filelist[0]}"

if [[ -z ${infile} ]];then echo "You must supply a directory or file name";fi

if [[ -f "${infile}" ]];then processType="file";fi
if [[ -d ${infile} ]];then processType="directory";fi

if [[ -z $processType ]];then echo "No files or directory matching the input can be found";fi

read -r -d '' awkscript << "ENDOFAWK"
#!/usr/bin/awk -f 

BEGIN { goodrecs=badrecs=bad001=badleader=baddirectory=bibcount=holdingscount=authoritycount=0
	subfield_0 = SFS"0" 
	subfield_9 = SFS"9"
}
function check_fields() {
	## get rid of bad subfield zeros that break links
	gsub(subfield_0, subfield_9, $0)	

	## normalize high ascii chars if coded as utf8
	if (utf8 == "a") { 
		if (match($0, BAD_CHAR_REGEX) > 1) {
			$0 = substr($0, 1, 9)" "substr($0, 11)
		}
	}

	if (directory ~ /[^0-9A-Z]/){directory_check = 1;good_directory = 0}

	if (directory_check == 0) {
		for (i=1; i<=directory_length; i=i+12) {
			if (substr(directory, i, 3) == "004") {
				if (rectype !~ "holdings" ) { $0 = substr($0, 1, 6)"y"substr($0, 8); }
				rectype="holdings"
			}
			if (substr(directory, i, 3) == "008") {found008 = 1}
			if (substr(directory, i, 3) == "245") {override245=found245=1;rectype="bib"}
			if (substr(directory, i, 3) ~ /[A-Z]/) {good_tag=0}
			if (substr(directory, i, 3) ~ /[^A-Z0-9]/) {good_directory=0}
		}
	} else {
		good_directory = 0
	}
}

function check_leader() {
	leader=substr($0,1,24)
	baseaddress=substr(leader,13, 5) + 0
	utf8=substr(leader,10, 1)
	directory=substr($0,25, baseaddress - 25)
	directory_length=length(directory) 
	directory_check=(directory_length % 12)
	record_length = length($0) + 0
	reported_length = substr($0, 1, 5) - 1

	if (record_length > 99999) {oversized = 1;totaloversized++;print $0 > "tmp_oversized.mrc"}
	
	if (reported_length != record_length){good_length = 0}

	status_indicator=substr(leader, 6, 1)
	if (status_indicator !~ /[acdnopsx]/) { $0 = substr($0, 1, 5)"c"substr($0, 7); }

	control_indicator=substr(leader, 9, 1)
	if (control_indicator != "a" && control_indicator != " ") { $0 = substr($0, 1, 8)" "substr($0, 10) }

	form_indicator=substr(leader, 17, 1)
	if (form_indicator !~ /[ acinu]/) { $0 = substr($0, 1, 8)" "substr($0, 10) }
	
	if (substr($0, 21, 4) != "4500") { $0 = substr($0, 1, 20)"4500"substr($0, 25) }

	rectype="bib"

	rectype_indicator=substr(leader, 7, 1)

	switch(rectype_indicator) {
		case /^[acdefngijkmoprt@]$/:
			rectype = "bib"
			break
		case /^[uvxy]$/:
			rectype="holdings"
			break
		case "z":
			rectype="authority"
			break
		default:
			$0 = substr($0, 1, 6)"a"substr($0, 8);
	}

}
{
goodrec=good_directory=good_length=good_tag=1
found004=found008=found245=override245=oversized=0

check_leader()
check_fields()

skip=0

OUTFILE = FILEROOT"_"rectype"_fixed.mrc"

if ( goodrec == 1 && good_directory == 1 && good_length == 1 && found008 == 0){ goodrecs++;skip = 1;missing_008++; print $0 > "tmp_"rectype"_008.mrc" }

foundbad = 0
if ( good_length == 0){ print $0 > "bad_length_"rectype"_"FILEROOT;badlength++;badlengthtext = " (length: "badlength")";foundbad = 1 }

if ( good_directory == 0 && foundbad == 0){ print $0 > "bad_directory_"rectype"_"FILEROOT;baddirectory++;baddirectorytext = " (directory: "baddirectory")";foundbad = 1 }

if (rectype == "bib") {
	if ( found245 == 0 && foundbad == 0){ print $0 > "bad_missing245_"rectype"_"FILEROOT;bad245++;bad245text = " (245: "bad245")";foundbad = 1 }
}

if ( good_tag == 0 && foundbad == 0) { print $0 > "bad_nonumeric_tag_"rectype"_"FILEROOT;badtag++;badtagtext = " (Nonnumeric tags: "badtag")";foundbad = 1 }

if ( goodrec == 1 && good_directory == 1 && good_length == 1 && foundbad == 0 && found008 == 1 ){ goodrecs++;print $0 > OUTFILE }

if (foundbad == 1) { badrecs++ }
if ( badrecs > 0 ){ badtext=baddirectorytext""bad001text""bad008text""bad010text""bad245text""badlengthtext""badtagtext }

if (rectype == "bib") { bibcount++ }
if (rectype == "holdings") { holdingscount++ }
if (rectype == "authority") { authoritycount++ }

if (NR % 10000 == 0){ printf "Bib: %d Holdings: %d Authority: %s Bad: %d Issues: %s\r", bibcount, holdingscount, authoritycount, badrecs, badtext }

}
END { 
ORS=OFS="\\n"
close(OUTFILE)

bibmsg=holdingsmsg=authoritymsg=""

if (bibcount > 0) { bibmsg = bibcount" records output to "FILEROOT"_bib_fixed.mrc\\n" }
if (holdingscount > 0) { holdingsmsg = holdingscount" records output to "FILEROOT"_holdings_fixed.mrc\\n" }
if (authoritycount > 0) { authoritymsg = authoritycount" records output to "FILEROOT"_authority_fixed.mrc\\n" }

printf "Good records: %d Bad records: %d Issues: %s                             \\n\\n", goodrecs, badrecs, badtext
printf "Bib records: %d Holdings records: %d Authority records : %s                     \\n\\n", bibcount, holdingscount, authoritycount 
print bibmsg""holdingsmsg""authoritymsg""

if (badrecs > 0) { print badrecs" records were output to the files listed below and prefixed with bad_" }
if (totaloversized > 0) {print totaloversized" oversized were truncated"}
}

ENDOFAWK


process_file() {
	fileroot=$(echo "${marcfile}" | sed 's/\.....\?$//')

	rm -f "bad_*${fileroot}.mrc"
	rm -f "${fileroot}_fixed.mrc"

	firstnum=$'\x09'
	lastnum=$'\xFF'
	regex="[^${firstnum}-${lastnum}]"
	SFS=$'\x1f'

	echo -e "${awkscript}" > tmp_checkmarc
	chmod 700 tmp_checkmarc

	echo
	echo "Processing ${marcfile}"	
	echo
	mv "${marcfile}" "${marcfile}.tmp"
	
	
	echo "Detecting and removing nulls and converting carriage returns, newlines, and tabs to spaces"
	pv "${marcfile}.tmp" | tr -d '\000' | tr '\n\r\t' ' ' > "${marcfile}"
	echo 

	# ala codes followed by tabs and line breaks	
	#bad_chars="$'\x1b'$'\xe1'$'\xe2'$'\xe3'$'\xe4'$'\xe5'$'\xe6'$'\xe7'$'\xe8'$'\xe9'$'\xc3'"

	#ala characters
	bad_char_regex=[$'\x80'-$'\xff]'

	awk -v RS=$'\x1d' -v ORS=$'\x1d' -v FS=$'\x1e' -v SFS=$'\x1f' -v FILEROOT="${fileroot}" -v BAD_CHAR_REGEX=${bad_char_regex} -b -f tmp_checkmarc "${marcfile}"
	sleep 1
	
	ls bad_*"${fileroot}" 2> /dev/null
	echo
}

if [[ $processType == "file" ]];then 
	for marcfile in "${filelist[@]}";do
		process_file "${marcfile}"

		
		temproot="tmp_bib_008"
		if [[ -f ${temproot}.mrc ]];then
			marc2text ${temproot}.mrc 
			sed -i 's/^\(=LDR.*$\)/\1\n=008  780615s19uu    xx a                    d/' ${temproot}.txt
			text2marc ${temproot}.txt
			cat ${temproot}.mrc  >> "${fileroot}_bib_fixed.mrc"
			rm -f ${temproot}.*
			echo "Bib records lacking 008 were fixed and appended to ${fileroot}_bib_fixed.mrc"
		fi
		
		temproot="tmp_authority_008"
		if [[ -f ${temproot}.mrc ]];then
			marc2text ${temproot}.mrc 
			sed -i 's/^\(=LDR.*$\)/\1\n=008  780615|| |||||aa||          |n aaa      /' ${temproot}.txt
			text2marc ${temproot}.txt
			cat ${temproot}.mrc  >> "${fileroot}_authority_fixed.mrc"
			rm -f ${temproot}.*
			echo "Authority records lacking 008 were fixed and appended to ${fileroot}_authority_fixed.mrc"
		fi
		
		temproot="tmp_holdings_008"
		if [[ -f ${temproot}.mrc ]];then
			marc2text ${temproot}.mrc 
			sed -i 's/^\(=LDR.*$\)/\1\n=008  7806150p    8   4001uu   0000000/' ${temproot}.txt
			text2marc ${temproot}.txt
			cat ${temproot}.mrc  >> "${fileroot}_holdings_fixed.mrc"
			rm -f ${temproot}.*
			echo "Holdings records lacking 008 were fixed and appended to ${fileroot}_holdings_fixed.mrc"
		fi

		if [[ -f tmp_oversized.mrc ]];then
			marc2text tmp_oversized.mrc
			text2marc tmp_oversized.txt
			cat tmp_oversized.mrc  >> "${fileroot}_bib_fixed.mrc"
			rm -f tmp_oversized.*
			echo "Oversized records were appended to ${fileroot}_bib_fixed.mrc"
		fi
	done
	rm -f tmp_checkmarc
fi

if [[ $processType == "directory" ]]; then
	cd "${infile}"
	ls |sed 's/^/echo;marcfix /' > tmp_process
	chmod 700 ./tmp_process
	./tmp_process
	rm -f tmp_process
	rm -f tmp_checkmarc
	cd ..
fi

